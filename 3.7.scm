#lang racket
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insuffincient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (how-many-calls count)
    (lambda (m)
      (begin (set! count (+ count 1))
             (if (> count 7)
                 "call-the-cops"
                 "Incorrect Password"))))
  (define result (how-many-calls 0))
  (define (dispatch pass m)
    (if (eq? password pass)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                (else (error "Unkown request -- MAKE-ACCOUNT"
                             m)))
          result))
  dispatch)

(define (make-joint account password newpassword)
  (define (how-many-calls count)
    (lambda (m)
      (begin (set! count (+ count 1))
             (if (> count 7)
                 "call-the-cops"
                 "Incorrect Password"))))
  (define result (how-many-calls 0))
  (define (dispatch checkpassword command)
          (if (eq? newpassword checkpassword)
              (account password command)
              result))
  dispatch)

(define acc (make-account 100 'secret-password))

((acc 'secret-password 'withdraw) 40)

(define paul-acc 
  (make-joint acc 'secret-password 'new-pass))

((acc 'secret-password 'deposit) 50)
((paul-acc 'new-pass 'deposit) 50)
((acc 'secret-password 'withdraw) 50)
((paul-acc 'new-pass 'withdraw) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
((paul-acc 'secret-password 'deposit) 50)
#lang scheme
(define (accumulate  term a next b)
  (if (> a b)
      1
      (* (term a )
         (accumulate  term (next a) next b))))

(define (accumulate-iter  term a next b)
  (define ( iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result)))
    )
  (iter a 1))

(define (product a b)
  (define (next a)
    (+ a 1)
    )
  (define (term a)
    (/ 
      (* (* a 2) (* a 2))
      (* (- (* a 2) 1) (+ (* a 2) 1)))
    )
  (* (accumulate term a next b) 0.5)
  )

(define (product-iter a b)
  (define (next a)
    (+ a 1)
    )
  (define (term a)
    (/ 
      (* (* a 2) (* a 2))
      (* (- (* a 2) 1) (+ (* a 2) 1)))
    )
  (* (accumulate-iter term a next b) 0.5)
  )

(product-iter 1 10000)